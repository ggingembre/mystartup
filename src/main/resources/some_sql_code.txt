------ Here I write down a code that can still come in handy----


CREATE TABLE IF NOT EXISTS `education` (
  `id`                     BIGINT PRIMARY KEY                              AUTO_INCREMENT,
  `educationalInstitution` VARCHAR(455)                                    DEFAULT NULL,
  `educationalStage`       VARCHAR(455)                                    DEFAULT NULL,
  `faculty`                VARCHAR(455)                                    DEFAULT NULL,
  `fieldOfStudy`           VARCHAR(455)                                    DEFAULT NULL,
  `modeOfStudy`            VARCHAR(45)                                     DEFAULT NULL,
  `from`                   DATE                                            DEFAULT NULL,
  `until`                  DATE                                            DEFAULT NULL,
  CONSTRAINT experience_id_uindex UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS user_education
(
  user_username  VARCHAR(45) NOT NULL,
  educations_id BIGINT      NOT NULL,
  CONSTRAINT user_education_user_username_fk
  FOREIGN KEY (user_username) REFERENCES user (username),
  CONSTRAINT user_education_educations_id_fk
  FOREIGN KEY (educations_id) REFERENCES education (id)
);






CREATE TABLE IF NOT EXISTS user_experience
(
  user_username  VARCHAR(45) NOT NULL,
  experiences_id BIGINT      NOT NULL,
  CONSTRAINT user_experience_user_username_fk
  FOREIGN KEY (user_username) REFERENCES user (username),
  CONSTRAINT user_experience_experience_id_fk
  FOREIGN KEY (experiences_id) REFERENCES experience (id)
);



`from`           TIMESTAMP                                        NULL,
  `until`          TIMESTAMP                                        NULL,






**
 * Service for {@link ua.goit.entity.Experience} which will use
 * {@link ua.goit.dao.ExperienceDao} as data access object
 * @KontarMaryna
 */
@Service
public class ExperienceService {
    private final ExperienceDao experienceDao;
    @Autowired
    public ExperienceService(ExperienceDao experienceDao) {
        this.experienceDao = experienceDao;
    }
    @Transactional
    public <S extends Experience> S save(S entity) {
        return experienceDao.save(entity);
    }
}






/**
 * Data access object for {@link ua.goit.entity.Experience}
 * @KontarMaryna
 */
public interface ExperienceDao extends JpaRepository<Experience, Long> {
}





private final ExperienceService experienceService;
    @Autowired
    public ShowUsersController(UserService usersService, ExperienceService experienceService, PasswordEncoder passwordEncoder) {
        this.usersService = usersService;
        this.experienceService = experienceService;
        this.passwordEncoder = passwordEncoder;
    }





    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
     ,LocalDate.parse("4/03/2017", formatter),
                    LocalDate.parse("10/10/2018", formatter);